<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Tokens', 'doctrine');

/**
 * BaseTokens
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $device_id
 * @property string $token
 * @property integer $user_id
 * @property integer $device_type
 * @property timestamp $create_time
 * @property timestamp $last_access
 * @property Users $Users
 * 
 * @method integer   getId()          Returns the current record's "id" value
 * @method string    getDeviceId()    Returns the current record's "device_id" value
 * @method string    getToken()       Returns the current record's "token" value
 * @method integer   getUserId()      Returns the current record's "user_id" value
 * @method integer   getDeviceType()  Returns the current record's "device_type" value
 * @method timestamp getCreateTime()  Returns the current record's "create_time" value
 * @method timestamp getLastAccess()  Returns the current record's "last_access" value
 * @method Users     getUsers()       Returns the current record's "Users" value
 * @method Tokens    setId()          Sets the current record's "id" value
 * @method Tokens    setDeviceId()    Sets the current record's "device_id" value
 * @method Tokens    setToken()       Sets the current record's "token" value
 * @method Tokens    setUserId()      Sets the current record's "user_id" value
 * @method Tokens    setDeviceType()  Sets the current record's "device_type" value
 * @method Tokens    setCreateTime()  Sets the current record's "create_time" value
 * @method Tokens    setLastAccess()  Sets the current record's "last_access" value
 * @method Tokens    setUsers()       Sets the current record's "Users" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTokens extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('mobile_tokens');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('device_id', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('token', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('device_type', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('create_time', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('last_access', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Users', array(
             'local' => 'user_id',
             'foreign' => 'id'));
    }
}